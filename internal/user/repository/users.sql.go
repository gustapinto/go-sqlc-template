// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repository

import (
	"context"
	"time"
)

const insertUser = `-- name: InsertUser :one
INSERT INTO "users" (
    login,
    password,
    email,
    created_at
) VALUES (
    $1::VARCHAR,
    $2::VARCHAR,
    $3::VARCHAR,
    $4::TIMESTAMP
)
RETURNING id, login, password, email, created_at, updated_at
`

type InsertUserParams struct {
	Login     string
	Password  string
	Email     string
	CreatedAt time.Time
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Login,
		arg.Password,
		arg.Email,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUserLog = `-- name: InsertUserLog :one
INSERT INTO "user_logs" (
    "user_id",
    "type",
    "message",
    "created_at"
)
VALUES (
    $1::BIGINT,
    $2::VARCHAR,
    $3::VARCHAR,
    $4::TIMESTAMP
)
RETURNING id, user_id, type, message, created_at
`

type InsertUserLogParams struct {
	UserID    int64
	Type      string
	Message   string
	CreatedAt time.Time
}

func (q *Queries) InsertUserLog(ctx context.Context, arg InsertUserLogParams) (UserLog, error) {
	row := q.db.QueryRowContext(ctx, insertUserLog,
		arg.UserID,
		arg.Type,
		arg.Message,
		arg.CreatedAt,
	)
	var i UserLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const selectUserByID = `-- name: SelectUserByID :one
SELECT
    id,
    login,
    password,
    email,
    created_at,
    updated_at
FROM
    "users"
WHERE
    id = $1::BIGINT
`

func (q *Queries) SelectUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectUserByLogin = `-- name: SelectUserByLogin :one
SELECT
    id,
    login,
    password,
    email,
    created_at,
    updated_at
FROM
    "users"
WHERE
    login = $1::VARCHAR
`

func (q *Queries) SelectUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserByID = `-- name: UpdateUserByID :exec
UPDATE
    "users"
SET
    login = $1::VARCHAR,
    email = $2::VARCHAR,
    updated_at = $3::TIMESTAMP
WHERE
    id = $4::BIGINT
`

type UpdateUserByIDParams struct {
	Login     string
	Email     string
	UpdatedAt time.Time
	ID        int64
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserByID,
		arg.Login,
		arg.Email,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
